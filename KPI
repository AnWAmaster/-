原题链接：
https://vjudge.net/contest/441568#problem/F

题目大意：
给出一个队列queue<int>q，有三种操作：
1、入队一个数
2、出队
3、假设用一个数组a[]升序存放该队列中的所有元素，求a[q.size()/2+1]的元素值

解题思路：
查询第k大的元素的值，（而且这题又有线段树的背景）
一看就知道要用到权值线段树了
又队列中放入的值的范围x(0≤x≤109)，但是操作数n(1≤n≤10000)  
故毫不犹豫地离散化
然后再用下队列模板模拟题意中的出队和入队
东西就出来了
（有点小卡cin,建议std::ios::sync_with_stdio(false)）

AC代码：
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
#define maxn 20000

struct Node{
	int l,r;
	int data;
}n[maxn];

string opt[maxn];

int a[maxn],totalcnt,len,lisan[maxn],cnt;

void build(int cur,int left,int right){
	n[cur].l=left,n[cur].r=right;
	n[cur].data=0;
	if(left==right)return;
	int mid=(left+right)/2;
	build(cur*2,left,mid);
	build(cur*2+1,mid+1,right);
}

void push_up(int cur){
	n[cur].data=n[cur*2].data+n[cur*2+1].data;
}

void _update(int cur,int idx,int val){
	if(n[cur].l>idx||n[cur].r<idx)return;
	if(n[cur].l==n[cur].r){
		n[cur].data+=val;
		return;
	}
	_update(cur*2,idx,val);
	_update(cur*2+1,idx,val);
	push_up(cur);
}

int query(int cur,int rank){
	if(n[cur].l==n[cur].r)
		return n[cur].l;
	if(n[cur*2].data>=rank)
		return query(cur*2,rank);
	else
		return query(cur*2+1,rank-n[cur*2].data);
}

int main(){
	int N,T=0,temp;
	std::ios::sync_with_stdio(false);
	queue<int>q;
	while(cin>>N){
		//离线操作 
		totalcnt=cnt=0;
		while(q.size())q.pop();
		for(int i=1;i<=N;i++){
			cin>>opt[i];
			if(opt[i]=="in"){
				++totalcnt;
				cin>>a[totalcnt];
				lisan[totalcnt]=a[totalcnt];
			}
		}
		//离散化
		sort(lisan+1,lisan+totalcnt+1);
		len=unique(lisan+1,lisan+totalcnt+1)-(lisan+1);
		build(1,1,len);
		cout<<"Case #"<<++T<<":"<<endl;
		for(int i=1;i<=N;i++){
			if(opt[i]=="in"){
				temp=a[++cnt];
				q.push(temp);
				int idx=lower_bound(lisan+1,lisan+1+totalcnt,temp)-lisan;
				_update(1,idx,1);
			}else if(opt[i]=="out"){
				temp=q.front();
				q.pop();
				int idx=lower_bound(lisan+1,lisan+1+totalcnt,temp)-lisan;
				_update(1,idx,-1);
			}else if(opt[i]=="query"){
				int idx=query(1,q.size()/2+1);
				cout<<lisan[idx]<<endl;
			}
		}
	}
}


